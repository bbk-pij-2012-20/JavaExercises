// cd ~/Desktop/ALL_POOLED/COMPUTING/CODING/JavaExercises/12_CONCURRENCY// Exercise 17.8: Introduction to concurrency/*A group of weak-sighted philosophers gathered around a circular table to have dinnertogether. They were served on one big round plate in the middle of the table, and theywere given a fork each (so there was a fork on the table between every two adjacentphilosophers). In order to prevent everybody to take food at the same time, riskingtheir clumsy hands hacking at their neighboursâ€™ with the forks, the philosophersdiscussed and agreed to adhere to the following protocol: each philosopher could onlyget food if it had grabbed both forks on their left and theirright.Write a program that implements a dinner with n philosophers and n forks. Make surethat each fork can be grabbed by only one philosopher at a time. Verify that a naivesynchronisation strategy can lead very quickly to a deadlock (when/why does thishappen?); fix the program so that this cannot happen.(Hint: during development, it may be helpful to implement a monitoring class (waiter?)that checks what the philosophers are doing, e.g. how many forks they have grabbed).*/public class DiningPhilosophers {  }